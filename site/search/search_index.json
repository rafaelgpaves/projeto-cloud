{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projeto de Computa\u00e7\u00e3o em Nuvem, 6\u00b0 semestre de Engenharia da Computa\u00e7\u00e3o do Insper Desenvolvido por Rafael Gordon Paves. Sobre o projeto O reposit\u00f3rio pode ser encontrado aqui O projeto foi dividido em duas etapas. Leia mais sobre elas abaixo. Etapa 1 Veja mais sobre a etapa 1 aqui Na primeira etapa, foi feita uma API conectada a um banco de dados Postgres, em uma aplica\u00e7\u00e3o conteinerizada, com o intuito de aprender conceitos como Docker, autentica\u00e7\u00e3o JWT, APIs, entre outros. Etapa 2 Veja mais sobre a etapa 2 aqui Na segunda etapa, foi implementada nossa aplica\u00e7\u00e3o na AWS, com o intuito de aprender conceitos como AWS, EKS e Kubernetes, EC2, entre outros.","title":"Home"},{"location":"#projeto-de-computacao-em-nuvem-6-semestre-de-engenharia-da-computacao-do-insper","text":"Desenvolvido por Rafael Gordon Paves.","title":"Projeto de Computa\u00e7\u00e3o em Nuvem, 6\u00b0 semestre de Engenharia da Computa\u00e7\u00e3o do Insper"},{"location":"#sobre-o-projeto","text":"O reposit\u00f3rio pode ser encontrado aqui O projeto foi dividido em duas etapas. Leia mais sobre elas abaixo.","title":"Sobre o projeto"},{"location":"#etapa-1","text":"Veja mais sobre a etapa 1 aqui Na primeira etapa, foi feita uma API conectada a um banco de dados Postgres, em uma aplica\u00e7\u00e3o conteinerizada, com o intuito de aprender conceitos como Docker, autentica\u00e7\u00e3o JWT, APIs, entre outros.","title":"Etapa 1"},{"location":"#etapa-2","text":"Veja mais sobre a etapa 2 aqui Na segunda etapa, foi implementada nossa aplica\u00e7\u00e3o na AWS, com o intuito de aprender conceitos como AWS, EKS e Kubernetes, EC2, entre outros.","title":"Etapa 2"},{"location":"etapa1/","text":"Sobre a etapa 1 Na primeira etapa, foi feita uma API conectada a um banco de dados Postgres, em uma aplica\u00e7\u00e3o conteinerizada, com o intuito de aprender conceitos como Docker, autentica\u00e7\u00e3o JWT, AWS, APIs, entre outros. Um dos requisitos era fazer um web scraping ou usar uma api atualizada regularmente. Neste projeto, escolhi Jikan , uma api com dados de animes, mang\u00e1s, personagens, produtoras, usu\u00e1rios, entre outros que est\u00e3o no site MyAnimeList. Executando a aplica\u00e7\u00e3o Baixe o compose.yaml ou copie: name: projeto services: db: image: postgres:17 environment: - POSTGRES_DB=${POSTGRES_DB:-projeto} - POSTGRES_USER=${POSTGRES_USER:-projeto} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-projeto} ports: - 5432:5432 healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-projeto} -d ${POSTGRES_DB:-projeto}\"] interval: 10s retries: 5 start_period: 30s timeout: 10s app: image: rafaelgp3/projetocloud-fastapi:v1 environment: - POSTGRES_DB=${POSTGRES_DB:-projeto} - POSTGRES_USER=${POSTGRES_USER:-projeto} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-projeto} ports: - 8000:8000 depends_on: db: condition: service_healthy restart: true No mesmo diret\u00f3rio do compose.yaml, rode o conteiner: docker compose up Para testar, pode entrar na documenta\u00e7\u00e3o pr\u00f3pria do FastAPI (Swagger) em http://localhost:8000/docs Quando quiser sair, pare o conteiner (rode esse comando em outro terminal): docker compose down Rotas POST /registrar - Requer no corpo da requisi\u00e7\u00e3o 3 chaves: \"email\", \"nome\" e \"senha\". - Em sucesso, devolve um token jwt, com expira\u00e7\u00e3o de 30 minutos, no formato {\"jwt\": ${token}} Exemplo de corpo da requisi\u00e7\u00e3o: Exemplo de resultado: POST /login - Requer no corpo da requisi\u00e7\u00e3o 2 chaves: \"email\" e \"senha\". - Em sucesso, devolve um token jwt, com expira\u00e7\u00e3o de 30 minutos, no formato {\"jwt\": ${token}} Exemplo de corpo da requisi\u00e7\u00e3o: Exemplo de resultado: GET /consulta - Requer no cabe\u00e7alho um token jwt v\u00e1lido (obtido a partir das rotas registrar ou login) - Em sucesso, devolve dados de um anime aleat\u00f3rio da API mencionada anteriormente pela rota https://api.jikan.moe/v4/random/anime. Alguns dados retornados incluem o nome do anime, data de lan\u00e7amento, g\u00eaneros, sinopse, est\u00fadio que produziu, entre outros. Clique no cadeado para autentica\u00e7\u00e3o: Coloque o token obtido anteriormente: Um exemplo de resultado: Dockeriza\u00e7\u00e3o Para criar a imagem, foram feitos esses passos: Entrar no diret\u00f3rio com a Dockerfile : cd app Usar dockerx (para criar imagens para m\u00faltiplas arquiteturas): docker buildx create --use Criar a imagem e dar push para o DockerHub: docker buildx build --platform linux/amd64,linux/ar64 -t rafaelgp3/projetocloud-fastapi:v1.0 -t rafaelgp3/projetocloud-fastapi:latest . --push Links V\u00eddeo mostrando as rotas Link para o DockerHub da imagem Compose.yaml","title":"Etapa1"},{"location":"etapa1/#sobre-a-etapa-1","text":"Na primeira etapa, foi feita uma API conectada a um banco de dados Postgres, em uma aplica\u00e7\u00e3o conteinerizada, com o intuito de aprender conceitos como Docker, autentica\u00e7\u00e3o JWT, AWS, APIs, entre outros. Um dos requisitos era fazer um web scraping ou usar uma api atualizada regularmente. Neste projeto, escolhi Jikan , uma api com dados de animes, mang\u00e1s, personagens, produtoras, usu\u00e1rios, entre outros que est\u00e3o no site MyAnimeList.","title":"Sobre a etapa 1"},{"location":"etapa1/#executando-a-aplicacao","text":"Baixe o compose.yaml ou copie: name: projeto services: db: image: postgres:17 environment: - POSTGRES_DB=${POSTGRES_DB:-projeto} - POSTGRES_USER=${POSTGRES_USER:-projeto} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-projeto} ports: - 5432:5432 healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-projeto} -d ${POSTGRES_DB:-projeto}\"] interval: 10s retries: 5 start_period: 30s timeout: 10s app: image: rafaelgp3/projetocloud-fastapi:v1 environment: - POSTGRES_DB=${POSTGRES_DB:-projeto} - POSTGRES_USER=${POSTGRES_USER:-projeto} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-projeto} ports: - 8000:8000 depends_on: db: condition: service_healthy restart: true No mesmo diret\u00f3rio do compose.yaml, rode o conteiner: docker compose up Para testar, pode entrar na documenta\u00e7\u00e3o pr\u00f3pria do FastAPI (Swagger) em http://localhost:8000/docs Quando quiser sair, pare o conteiner (rode esse comando em outro terminal): docker compose down","title":"Executando a aplica\u00e7\u00e3o"},{"location":"etapa1/#rotas","text":"POST /registrar - Requer no corpo da requisi\u00e7\u00e3o 3 chaves: \"email\", \"nome\" e \"senha\". - Em sucesso, devolve um token jwt, com expira\u00e7\u00e3o de 30 minutos, no formato {\"jwt\": ${token}} Exemplo de corpo da requisi\u00e7\u00e3o: Exemplo de resultado: POST /login - Requer no corpo da requisi\u00e7\u00e3o 2 chaves: \"email\" e \"senha\". - Em sucesso, devolve um token jwt, com expira\u00e7\u00e3o de 30 minutos, no formato {\"jwt\": ${token}} Exemplo de corpo da requisi\u00e7\u00e3o: Exemplo de resultado: GET /consulta - Requer no cabe\u00e7alho um token jwt v\u00e1lido (obtido a partir das rotas registrar ou login) - Em sucesso, devolve dados de um anime aleat\u00f3rio da API mencionada anteriormente pela rota https://api.jikan.moe/v4/random/anime. Alguns dados retornados incluem o nome do anime, data de lan\u00e7amento, g\u00eaneros, sinopse, est\u00fadio que produziu, entre outros. Clique no cadeado para autentica\u00e7\u00e3o: Coloque o token obtido anteriormente: Um exemplo de resultado:","title":"Rotas"},{"location":"etapa1/#dockerizacao","text":"Para criar a imagem, foram feitos esses passos: Entrar no diret\u00f3rio com a Dockerfile : cd app Usar dockerx (para criar imagens para m\u00faltiplas arquiteturas): docker buildx create --use Criar a imagem e dar push para o DockerHub: docker buildx build --platform linux/amd64,linux/ar64 -t rafaelgp3/projetocloud-fastapi:v1.0 -t rafaelgp3/projetocloud-fastapi:latest . --push","title":"Dockeriza\u00e7\u00e3o"},{"location":"etapa1/#links","text":"V\u00eddeo mostrando as rotas Link para o DockerHub da imagem Compose.yaml","title":"Links"},{"location":"etapa2/","text":"Sobre a etapa 2 Na segunda etapa, foi implementada nossa aplica\u00e7\u00e3o feita para a etapa 1 na AWS, com o intuito de aprender conceitos como AWS, EKS e Kubernetes, EC2, entre outros. Links V\u00eddeo mostrando requisitos Link para a aplica\u00e7\u00e3o deployada na AWS deployment.yaml","title":"Etapa2"},{"location":"etapa2/#sobre-a-etapa-2","text":"Na segunda etapa, foi implementada nossa aplica\u00e7\u00e3o feita para a etapa 1 na AWS, com o intuito de aprender conceitos como AWS, EKS e Kubernetes, EC2, entre outros.","title":"Sobre a etapa 2"},{"location":"etapa2/#links","text":"V\u00eddeo mostrando requisitos Link para a aplica\u00e7\u00e3o deployada na AWS deployment.yaml","title":"Links"}]}